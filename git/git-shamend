#!/bin/sh
set -o nounset

# Copyright (c) 2014 Danielle E. Sucher <dsucher@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

PrintGitShamendUsage() {
  echo
  echo "git-shamend amends your staged changes as a fixup (keeping the pre-existing"
  echo "commit message) to the specified older commit in the current branch."
  echo
  echo "USAGE:"
  echo "stage the changes you want to amend into an earlier commit, then run:"
  echo "\`git shamend SHA_TO_AMEND\`"
  echo "(where SHA_TO_AMEND must be the SHA for a commit in the current branch)"
  echo
}

if [ -z "$*" ]
then
  PrintGitShamendUsage
  exit 1
fi

SHA_TO_AMEND=$(git rev-parse "$@")

if git merge-base --is-ancestor $SHA_TO_AMEND HEAD
then
  BOLD=$(tput bold)
  RED=$(tput setaf 1)
  NORMAL=$(tput sgr0)

  echo "${BOLD}Warning: your unstaged changes will be stashed during this process${NORMAL}"

  git commit --fixup $SHA_TO_AMEND > /dev/null

  git diff-index --quiet HEAD
  NOTHING_TO_STASH=$?
  if [ $NOTHING_TO_STASH -ne 0 ]
  then
    git stash > /dev/null
  fi

  GIT_EDITOR=true git rebase -i --autosquash "$SHA_TO_AMEND^"

  if [ $? -ne 0 ]
  then
    git rebase --abort
    git reset --soft HEAD^
    echo "${RED}${BOLD}Whoops, that didn't work! Cleaning up after this attempt now, but"
    echo "it looks like you'll have to interactive rebase this one manually.${NORMAL}"
  fi

  if [ $NOTHING_TO_STASH -ne 0 ]
  then
    git stash pop > /dev/null
  fi
else
  PrintGitShamendUsage
  exit 1
fi

